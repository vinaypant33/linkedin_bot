from time import sleep
import os
import sys
import tkinter as tk
import pyautogui
import keyboard
import selenium
import threading


import ttkbootstrap as btk
from ttkbootstrap.toast import ToastNotification

from ttkbootstrap.tooltip import ToolTip


import selenium_data

####__________ Constants __________________####
NORMAL_SLEEP_TIME = 10
MICRO_SLEEP_TIME  = 2
WORKING  = True


stop_event  = threading.Event()


def toast_message(text , duration):
    toast = ToastNotification("Linkedin Bot" , message=text , duration=duration)
    toast.show_toast()



########### ___________ Function for Multiprocessing ____________##########
def UI():

    def clear_password_box():
        password_entry.delete( 0 ,190)
        sleep(1 / 4)
        password_entry.configure(show="*")
    
    main_window  = btk.Window(title="Linkedin Bot" , themename="cyborg" , resizable=(0 , 0))



    username_var = btk.StringVar(value="Enter Username")
    password_var = btk.StringVar(value="Enter Password")
    checkvar  = btk.BooleanVar(value=False)
    page_depth_variable_initial  = btk.IntVar(value=0)
    page_depth_variable_final  = btk.IntVar(value = 3)
    retries_variable  = btk.IntVar(value  = 10)
   

    keywords_var  = btk.StringVar(value="HR India")


    def checkbuttonclicked():
        if checkvar.get() == True:
            password_entry.configure(show="")
           
        elif checkvar.get() == False:
            if password_entry.get() == "Enter Password":
                pass
            else:
                password_entry.configure(show="*")

    def check_button_check(x):
        if checkvar.get() == True:
            password_entry.configure(show="")
           
        elif checkvar.get() == False:
            if password_entry.get() == "Enter Password":
                pass
            else:
                password_entry.configure(show="*")
    
    def seconds_scale_changed(x):
        wait_seconds_value.configure(text=str(round(wait_seconds.get())) + " Seconds")  


    def selenium_bot_starting():
        if username_entry.get() == "" or password_entry.get() == "":
            toast_message("Enter Username Password and other Fields to start the bot" , 3000)
        elif username_entry.get() == "Enter Username" or password_entry.get() == "Enter Password":
            toast_message("Enter the actual Username and Password to Start" , 3000)
        elif round(wait_seconds.get()) == 0:
            toast_message("Enter the waiting time also :" , 2000)
        else:
            username = username_entry.get()
            password  = password_entry.get()
            waiting_time  = round(wait_seconds.get())
            actual_message  = str(multiline_messagebox.get("1.0", "end-1c"))
           
            selenium_data.selenium_bot(username=username , password = password , wait_seconds=waiting_time , keywords=keywords_box.get() , page_numbers=page_depth_final.get() , message_string = actual_message)
            
        
        # progressbar.step(1)
        # print(progressbar.variable.get())
        


    def stopping_selenium_bot():
        selenium_data.stopping_bot()
             
    def closing_application():
        selenium_data.stopping_bot()
        sys.exit()

    
    application_width = 890
    application_height = 700

    window_height  = main_window.winfo_screenheight()
    window_width  = main_window.winfo_screenwidth()

    x_location  = ( window_width // 2 ) - ( application_width // 2)
    y_location  = (window_height // 2) - ( application_height // 2)

    main_window.geometry(f"{application_width}x{application_height}+{x_location}+{y_location}")


    ## UI Based Functions ( Only for the UI based data )
    upper_box  = btk.Frame(main_window , width=900 , height=70 , border = 1 )
    
    username_entry  = btk.Entry(upper_box , textvariable=username_var , width=31)
    password_entry  = btk.Entry(upper_box , textvariable=password_var , width=31)
    showpasswordcheckbox = btk.Checkbutton(upper_box , text="Show Password" , variable=checkvar , command=checkbuttonclicked  ,bootstyle="square-toggle")
    seperator = btk.Separator(orient=btk.HORIZONTAL)
    middle_box  = btk.Frame(main_window , width=900 , height=70 )


    page_depth_initial = btk.Spinbox(middle_box , from_=0 , to=1000 , textvariable=page_depth_variable_initial , width=12)
    page_depth_final  = btk.Spinbox(middle_box , from_=0 , to = 1000 , textvariable=page_depth_variable_final , width= 12)
    
    
    wait_seconds  = btk.Scale(middle_box , from_= 0 , to=60 , length=200 , command=seconds_scale_changed , value=6)
    wait_seconds_value  = btk.Label(middle_box , text=f"{wait_seconds.get()} Seconds" , width=10)
    retries_  = btk.Spinbox(middle_box , from_=0 , to=10 , width=12 , textvariable=retries_variable )

    seperator_2  = btk.Separator(orient=btk.HORIZONTAL)

    lower_middle_frame  = btk.Frame(main_window , width=900 , height=400)

    seperator_3  = btk.Separator(orient=btk.HORIZONTAL)

    keywords_box  = btk.Entry(lower_middle_frame ,textvariable=keywords_var , width=90)
    multiline_messagebox  = btk.Text(lower_middle_frame , width=85 , height=15 )

   
    start_button = btk.Button(main_window , text="Start" , bootstyle  = btk.SUCCESS , width=25 , command=selenium_bot_starting)
    stop_button = btk.Button(main_window , text="Stop" , bootstyle  = btk.DANGER , width=25 , command=stopping_selenium_bot)
    reset_button = btk.Button(main_window , text="Reset" , bootstyle  = btk.WARNING , width=25)

    # progressbar  = btk.Floodgauge(main_window , length=860 , maximum = 100 , value=10, orient=tk.HORIZONTAL , bootstyle="success-striped" , mode='determinate')
    progressbar  = btk.Floodgauge(main_window , maximum=100 , mask="Progress {}%" , length=860 , value=0, bootstyle="dark" , mode='determinate')
    
    


    # Configure Controls : 
    upper_box.pack_propagate(0)
    middle_box.pack_propagate(0)
    lower_middle_frame.pack_propagate(0)

    

    # Binding Controls : 
    username_entry.bind("<FocusIn>" , lambda x : username_entry.delete(0 , 190))
    password_entry.bind("<FocusIn>" , lambda x : clear_password_box())
    keywords_box.bind("<FocusIn>" , lambda x :keywords_box.delete(0 , 100))
    password_entry.bind("<KeyRelease>" ,  check_button_check)


    # Binding Control to make a tooltip : 
    initial_depth_tooltip = ToolTip(page_depth_initial, text="Initial Page Count from Where the Count is to start" , bootstyle="light" , delay=500)
    final_page_tooltip  = ToolTip(page_depth_final , text="Final Page Count till then the Bot shall scrap Urls" , bootstyle="light" , delay=500)
    wait_seconds_tooltip = ToolTip(wait_seconds , text="Number of Seconds to Wait for Every Operation ( Login, Scrapping Etc.)" , bootstyle="light" , delay=500)
    retries_tooltip = ToolTip( retries_ , text="Number of retries browser does before throiwing error " , bootstyle="light" ,delay=500)
    multiline_messagebox_tooltip = ToolTip(multiline_messagebox , text="Enter Full Message Here with the spaces and Line Breaks ( Only Skip Hi, Hello it will be added by bot on its own ( with name ))" , bootstyle="light" , delay=500)


    # password_tooltip = ToolTip(password_entry , text="Enter Linkedin Password" , )

    
    # Pack the controls
    upper_box.pack(padx=0 , pady=0 , anchor="n")
    username_entry.pack(side=tk.LEFT , anchor=tk.N , pady=10 , padx = 10)
    password_entry.pack(side=tk.LEFT , anchor=tk.N , pady=10 , padx= 10)
    showpasswordcheckbox.pack(side=tk.RIGHT , anchor=tk.N , pady=19 , padx=(0,30))
    seperator.pack(fill="x" , padx=10)

    middle_box.pack()
    page_depth_initial.pack(side=tk.LEFT , anchor=tk.N ,pady=10  ,padx = 10)
    page_depth_final.pack(side=tk.LEFT , anchor=tk.N , pady=10 , padx=10)
    wait_seconds_value.pack(side=tk.LEFT , anchor=tk.N , pady=16 , padx =10)
    wait_seconds.pack(side=tk.LEFT , anchor=tk.N ,pady=20  ,padx = 10)
    retries_.pack(side=tk.RIGHT , anchor=tk.N , padx=10 , pady=10)

    seperator_2.pack(fill=tk.X ,  padx=10)


    lower_middle_frame.pack()
    keywords_box.pack(padx=10 , pady=10)
    multiline_messagebox.pack(side=tk.LEFT , anchor=tk.NE  ,padx = 10 , pady = 10)
   
    seperator_3.pack(fill=tk.X , padx = 10)
    start_button.pack(side=tk.LEFT , padx=10 , pady=20 , anchor=tk.N)
    stop_button.pack(side=tk.LEFT , padx=10 , pady=20 , anchor=tk.N)
    reset_button.pack(side=tk.LEFT , padx=10 , pady=20 , anchor=tk.N)

    progressbar.place(x  = 10 , y = 620)

    main_window.protocol("WM_DELETE_WINDOW", closing_application)

    main_window.mainloop()






######___________ Main Code ___________#########
if __name__ == '__main__':
    main_thread  = threading.Thread(target=UI)
    main_thread.start()

    while WORKING == False:
        try:
            stop_event.set()
        except Exception as stop_event_error:
            toast_message(f"Stop Event Error {stop_event_error}")









from selenium import webdriver
from typing import Any
from selenium.webdriver.common.by import By
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.support.ui import Select
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from time import sleep
from tqdm import tqdm
import os
import sys
import time
import threading


import pyautogui
from bs4 import BeautifulSoup

from ttkbootstrap.toast import ToastNotification # For showing the error messages


from tkinter import messagebox



#### Constants : 
working  = False
progress_value  = 0
progress_text = "I am Progress Text"

# Here the Images to be imported : 
connect_button_image  = "connect.png"
more_button_image = "more.png"
second_connect_button  = "second_connect.png"

stop_event  = threading.Event()



class selenium_class():

    # def locate_image_once_with_timeout(self , image_path, timeout=5):
    #     start_time = time.time()
    #     location = None  # Initialize location to None
    #     location = pyautogui.locateOnScreen(image_path)
    #     while time.time() - start_time < timeout:
    #         if location:  # If image is found, exit the loop
    #             break
    #         time.sleep(0.1)  # Add a small delay to avoid busy-waiting
    #     return location

    def error_file_working(self , error_message):
        with open("error_file.txt", "w") as file:
                file.write(error_message + "\n")

    def __init__(self , username  , password  , waitseconds , keywords , page_numbers , message_string):

        self.username = username
        self.password  = password
        self.waitseconds  = waitseconds
        self.keywords  = keywords
        self.page_numebrs = int(page_numbers)
        self.link_list  = []
        self.failed_link_files = []
        self.message_string  = message_string



        options  = webdriver.ChromeOptions()
        options.add_experimental_option('detach', True)
        options.add_argument("--disable-webrtc")  # Disable WebRTC
        options.add_argument("--log-level=3")    # Reduce log verbosity

        self.driver = webdriver.Chrome(options=options)


        try:
            self.driver.get("https://www.linkedin.com/checkpoint/rm/sign-in-another-account")
            self.driver.maximize_window()
            username  = self.driver.find_element(By.ID , "username")
            username.send_keys(self.username)
            password  = self.driver.find_element(By.ID , "password")
            password.send_keys(self.password)
            sleep(waitseconds // 2)
            self.driver.find_element(By.XPATH , '//*[@id="organic-div"]/form/div[4]/button').click()
            sleep(waitseconds)
        except Exception as login_error:
            self.error_file_working(f"Login Error Unable to Login and Exiting Program :{login_error} ::  {time.time()}")
            sleep(waitseconds)
            self.driver.close()
            sys.exit()
        
        try:
            for i in range(self.page_numebrs):
                self.driver.get(f"https://www.linkedin.com/search/results/people/?keywords={self.keywords}&page={i}")
                sleep(self.waitseconds / 3)
                source  = self.driver.page_source
                soup = BeautifulSoup(source, 'html.parser')
                links = soup.find_all('a')
                for link in links:
                    href = link.get('href')
                    if href :
                        if "www.linkedin.com/in/" in href:
                            self.link_list.append(href)
            
            self.link_list =  list(set(self.link_list))

            with open("link_file.txt", "w") as file:
                for line in self.link_list:
                    file.write(line + "\n")
        except Exception as link_error:
            self.error_file_working(f"Link Error {link_error} :: {time.time()}")
            sleep(waitseconds)
            self.driver.close()
            sys.exit()
        

      
        for link in self.link_list:
                pyautogui.moveTo(300 , 300 , 1)
                sleep(2)
                self.driver.get(link)
                sleep(2)
                try:
                    location = pyautogui.locateOnScreen(connect_button_image , confidence=0.9)
                    if location:
                        pyautogui.moveTo(location.left + 50 , location.top + 40 , 1)
                        pyautogui.click()
                        pyautogui.moveTo(1287 , 550 , 1)
                        pyautogui.click()
                        try:
                            name_element = self.driver.find_element(By.XPATH , '/html/body/div[7]/div[3]/div/div/div[2]/div/div/main/section[1]/div[2]/div[2]/div[1]/div[1]/span[1]/a/h1')
                            name = name_element.get_attribute('innerText')
                            hi_text  = f"Hi {name},"
                        except Exception as name_error:
                            self.error_file_working(f"Unable to get the name of the User : {time.time()}")
                            hi_text = "Hi,"
                        pyautogui.write(hi_text)
                        pyautogui.press("enter")
                        pyautogui.write(self.message_string)
                        sleep(self.waitseconds // 2)
                        pyautogui.moveTo(1614 , 771, 1)
                        pyautogui.click()
                    else:
                        self.failed_link_files.append(link)
                    sleep(waitseconds)
                except Exception as connect_error:
                    sleep(1)
                    self.error_file_working(f"Unable to find the connect button : {connect_error} :: {time.time()}")
    

        
        for link in self.failed_link_files:
            with open("failed_links.txt", "w") as file:
                for line in self.failed_link_files:
                    file.write(line + "\n")



        for link in self.failed_link_files:
            pyautogui.moveTo(300 , 300 , 1)
            sleep(2)
            self.driver.get(link)
            sleep(2)
            try:
                move_to_location = pyautogui.locateOnScreen(more_button_image , confidence=0.9)
                if move_to_location:
                    pyautogui.moveTo(move_to_location.left + 50 , move_to_location.top + 40 , 1)
                    pyautogui.click()
                    # pyautogui.moveTo(910 ,1196 , 2)
                    another_location  = pyautogui.locateOnScreen(second_connect_button , confidence=0.9)
                    pyautogui.moveTo(another_location.left + 10 , another_location.top + 10 , 1)
                    pyautogui.click()
                    pyautogui.moveTo(1287 , 550 , 1)
                    pyautogui.click()
                    try:
                        name_element = self.driver.find_element(By.XPATH , '/html/body/div[7]/div[3]/div/div/div[2]/div/div/main/section[1]/div[2]/div[2]/div[1]/div[1]/span[1]/a/h1')
                        name = name_element.get_attribute('innerText')
                        hi_text  = f"Hi {name},"
                    except Exception as name_error:
                        self.error_file_working(f"Unable to get the name of the User : {time.time()}")
                        hi_text = "Hi,"
                    pyautogui.write(hi_text)
                    pyautogui.press("enter")
                    pyautogui.write(self.message_string)
                    sleep(self.waitseconds // 2)
                    pyautogui.moveTo(1614 , 771, 1)
                    pyautogui.click()
            except Exception as final_error:
                    self.error_file_working(f"Final Error : {final_error} :: {time.time()}")

        


        self.closing_browser()



        # try:
        #     self.driver.get("https://www.linkedin.com/checkpoint/rm/sign-in-another-account")
        # except Exception as driver_error:
        #     show_message(f"Unable to Start Selenium Driver for Chrome {driver_error}")

        # self.driver.maximize_window()

        # try:
        #     username  = self.driver.find_element(By.ID , "username")
        #     username.send_keys(self.username)
        #     password  = self.driver.find_element(By.ID , "password")
        #     password.send_keys(self.password)
        # except Exception as login_error:
        #     show_message(f"Login Error unable to find username or password filed {login_error}")
        #     sys.exit()

        # try:
        #     rememberbox  = self.driver.find_element(By.ID , "rememberMeOptIn-checkbox")
        #     rememberbox.click()
        # except Exception as remember_click:
        #     show_message("Unable to Click the Remember Box" , 3000)
        
        # sleep(waitseconds)
        # try:

        #     self.driver.find_element(By.XPATH , '//*[@id="organic-div"]/form/div[4]/button').click()
        # except Exception as button_error:
        #     show_message("Unable to click the button ( Exiting Program )" , 2000)
        #     self.driver.close()
        #     sys.exit()
        

        # try:
        #     self.driver.minimize_window()
        # ### Searching pages for the Urls :
        #     for i in range(self.page_numebrs):
        #         self.driver.get(f"https://www.linkedin.com/search/results/people/?keywords={self.keywords}&page={i}")
        #         sleep(self.waitseconds / 3)
        #         source  = self.driver.page_source
        #         soup = BeautifulSoup(source, 'html.parser')
        #         links = soup.find_all('a')
        #         for link in links:
        #             href = link.get('href')
        #             if href :
        #                 if "www.linkedin.com/in/" in href:
        #                     self.link_list.append(href)
        # except Exception as visit_error:
        #     show_message(f"Link Save Error : {visit_error}")
    
            

        # self.link_list =  list(set(self.link_list))

        # try:
        #     with open("link_file.txt", "w") as file:
        #         for line in self.link_list:
        #             file.write(line + "\n")
        # except Exception as save_file_error:
        #     show_message(f"Unable to save the file {save_file_error}")
        
        # self.driver.maximize_window()

        # try:
        #     for link in self.link_list:
        #         self.driver.get(link)
        #         # sleep(2)
        #         try:
        #             location = pyautogui.locateCenterOnScreen(connect_button_image , confidence=0.9 , minSearchTime=1)
        #         except Exception as error:
        #             show_message("Link Search Error" , 2000)
        #         if location:
        #             print("Found Data")
        #         else:
        #             print("Not Found")
        #         location = None
        # except Exception as link_error:
        #     show_message(f"Link Error : {link_error}" , 2000)
        
        

        # try:
        #     for link in self.link_list:
        #         self.driver.get(link)
        #         current_time  = time.time()
        #         while time.time() - current_time < 10:
        #             print("Cecking it ")
        #         print("Time Up and done")
        # except Exception as link_error:
        #     show_message(f"Link Error :{link_error}")
    
    # def sending_requestes(self):
    #     try:
    #         for link in self.link_list:
    #             self.driver.get(link)
    #             sleep(2)
    #             location  = self.locate_image_once_with_timeout(connect_button_image , 5)
    #             if location:
    #                 print("Found Data")
    #             else:
    #                 print("Not Found")
    #             start_time  = time.time()
    #             while time.time() - start_time < 10 :
    #                 connect_button_coordinates  = pyautogui.locateOnScreen(connect_button_image , confidence=0.9)
    #                 if connect_button_coordinates:
    #                     pyautogui.moveTo(connect_button_coordinates.left , connect_button_coordinates.top , duration=2)
    #                 else:
    #                     pyautogui.moveTo(848 , 936 , duration=2)
                
    #             try:
    #                 start_time  = time.time()  ### making a timeput as the pyautogui keeps on searching for the button and takes a lot of time in that
    #                 while time.time() - start_time < 10:
    #                     connect_coordinates  = pyautogui.locateOnScreen(connect_button_image , confidence=0.9 , region=(412 , 835 , 652 , 979))
    #                     pyautogui.moveTo(connect_coordinates.left , connect_coordinates.top , duration=2)
    #                     pyautogui.click()
    #                 show_message("Timeout Reached Moving to another profile :" , 2000)
    #             except Exception as connect_button_error:
    #                 show_message(f"Connect Button Error  {connect_button_error}")
    #                 try:
    #                     while time.time() - start_time  < 10:
    #                         more_button_coordinates  = pyautogui.locateOnScreen(more_button_image , confidence=0.9 , region=(412 , 835 , 652 , 979))
    #                         print(more_button_coordinates)
    #                     show_message("Timeout Reached Unable to find the connect button" , 2000)    
    #                 except Exception as more_button_error:
    #                     show_message(f"More Button Error : {more_button_error}")
    #     except Exception as link_error:
    #         show_message("Link Error"  ,2000)



    def closing_browser(self):
        self.driver.close()
        sys.exit()
        




def show_message(messsage, duration):
    toast = ToastNotification("Linkedin Bot" , message=messsage , duration=duration)
    toast.show_toast()



def selenium_bot(username, password , wait_seconds , keywords , page_numbers  , message_string):
    global working
    if not working:
        working = True
        show_message("Starting Bot :" , 2000)
        sleep(3)
        # threading.Thread(selenium_class(username=username , password=password , waitseconds=wait_seconds , keywords=keywords , page_numbers=page_numbers ) , daemon=True).start()
        selenium_class(username=username , password=password , waitseconds=wait_seconds  , keywords=keywords , page_numbers=page_numbers , message_string=message_string)

        # selenium_class(username=username , password=password , waitseconds=wait_seconds)
    else:
        show_message("Bot Already Working" , 3000)


def stopping_bot():
    global working
    working  = False
    show_message("Stopping Linkedin Bot" , 3000)
    sys.exit()
    























